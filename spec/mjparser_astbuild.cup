

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected = false;
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG;
terminal CONST;
terminal LBRACE, RBRACE, SEMI, LPAREN, RPAREN,  LBRACKET, RBRACKET, ASSIGN, RETURN, PLUS, COMMA, PRINT, VOID;
terminal Character CHARACTER;
terminal int NUMBER;
terminal Boolean BOOLEAN;
terminal String IDENT;
terminal IF, ELSE;
terminal CLASS, EXTENDS, DOT, COLON, RECORD;
terminal DO, WHILE, BREAK, CONTINUE, READ, GOTO;
terminal INC, DEC, MIN, MUL, DIV, MOD, EQ, NEQ, GT, GTE, LT, LTE, AND, OR;
terminal NEW;
terminal ISNULL, THIS, ENUM, SUPER;




terminal REVERSE, INCINC, MAX;

nonterminal Program Program;
nonterminal ListOfDeclForProg ListOfDeclForProg;
nonterminal DeclForProg DeclForProg;
nonterminal ListOfMethodDecls ListOfMethodDecls;
nonterminal ConstDecl ConstDecl;
nonterminal VarDecl VarDecl;
nonterminal RecordDecl RecordDecl;
nonterminal MethodDecl MethodDecl;
nonterminal ListOfConstExps ListOfConstExps;
nonterminal ConstVal ConstVal;
nonterminal NumConst NumConst;
nonterminal CharConst CharConst;
nonterminal BoolConst BoolConst;
nonterminal ListOfVarDecls ListOfVarDecls;
nonterminal VarDeclSingle VarDeclSingle;
nonterminal VarName VarName;
nonterminal ArrName ArrName;
nonterminal MulVarDecls MulVarDecls;
nonterminal ClassDecl ClassDecl;
nonterminal ConstructorDecl ConstructorDecl;
nonterminal ClassBody ClassBody;
nonterminal MethodFormPars MethodFormPars;
nonterminal ClassBodyWithConstructorPart ClassBodyWithConstructorPart;
nonterminal ClassBodyWithoutConstructorPart ClassBodyWithoutConstructorPart;
nonterminal FormParam FormParam;
nonterminal ListOfStatements ListOfStatements;
nonterminal FormPars FormPars;
nonterminal FormalParamList FormalParamList;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal Statement Statement;
nonterminal Statements Statements;
nonterminal StatementOnly StatementOnly;
nonterminal ActualParamList ActualParamList;
nonterminal Assignop Assignop;
nonterminal Relop Relop;
nonterminal Mulop Mulop;
nonterminal Addop Addop;
nonterminal Label Label;
nonterminal AddopTerm AddopTerm;
nonterminal ListOfAddopTerms ListOfAddopTerms;
nonterminal ListOfMulopFactors ListOfMulopFactors;
nonterminal Condition Condition;
nonterminal CondTerm CondTerm;
nonterminal CondFact CondFact;
nonterminal FormParamName FormParamName;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal DesignatorStatementParams DesignatorStatementParams;
nonterminal SingleStatement SingleStatement;
nonterminal MatchedStatement MatchedStatement;
nonterminal UnmatchedStatement UnmatchedStatement;
nonterminal IfPart IfPart;
nonterminal ElsePart ElsePart;
nonterminal DoPart DoPart;
nonterminal WhilePart WhilePart;
nonterminal BreakPart BreakPart;
nonterminal ContinuePart ContinuePart;
nonterminal ReturnPart ReturnPart;
nonterminal ReadPart ReadPart;
nonterminal PrintPart PrintPart;
nonterminal GotoPart GotoPart;
nonterminal IfConditionPart IfConditionPart;
nonterminal IncPart IncPart;
nonterminal DecPart DecPart;		
nonterminal ExprIsNull ExprIsNull;
nonterminal ListOfFormParams ListOfFormParams;
nonterminal ListOfOptParams ListOfOptParams;
nonterminal OptArg OptArg;
nonterminal IsNull IsNull;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgramName, ConstExp, MethodBegin, Designator;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Expr, ExprSingle, FactorWrapper, Term, Factor;



nonterminal IncIncPart IncIncPart;

Program ::= (Program) ProgramName:P1 ListOfDeclForProg:L2 LBRACE ListOfMethodDecls:L3 RBRACE {: RESULT=new Program(P1, L2, L3); RESULT.setLine(P1left); :};

ProgramName ::= (ProgramName) PROG IDENT:progName {: RESULT=new ProgramName(progName); RESULT.setLine(progNameleft); :};

ListOfDeclForProg ::= (ListDeclForProg) ListOfDeclForProg:L1 DeclForProg:D2 {: RESULT=new ListDeclForProg(L1, D2); RESULT.setLine(L1left); :}
					|
					(NoListOfDecs) {: RESULT=new NoListOfDecs(); :}
					;

DeclForProg ::= (ConstDeclForProg) ConstDecl:constDecl {: RESULT=new ConstDeclForProg(constDecl); RESULT.setLine(constDeclleft); :}
			  | 
			  (VarDeclForProg) VarDecl:varDecl {: RESULT=new VarDeclForProg(varDecl); RESULT.setLine(varDeclleft); :}
			  |
			  (ClassDeclForProg) ClassDecl:classDecl {: RESULT=new ClassDeclForProg(classDecl); RESULT.setLine(classDeclleft); :}
			  |
			  (RecordDeclForProg) RecordDecl:recordDecl {: RESULT=new RecordDeclForProg(recordDecl); RESULT.setLine(recordDeclleft); :}
			  ;

ConstDecl ::= (ConstDeclaration) CONST Type:constType ConstExp:C1 ListOfConstExps:L2 SEMI {: RESULT=new ConstDeclaration(constType, C1, L2); RESULT.setLine(constTypeleft); :};

ListOfConstExps ::= (ConstExpsList) ListOfConstExps:L1 COMMA ConstExp:C2 {: RESULT=new ConstExpsList(L1, C2); RESULT.setLine(L1left); :}
				  |
				  (NoConsts) {: RESULT=new NoConsts(); :}
				  ;
				  
ConstExp ::= (ConstExp) IDENT:constName ASSIGN ConstVal:constVal {: RESULT=new ConstExp(constName, constVal); RESULT.setLine(constNameleft); :};
				  
ConstVal ::= (NumConstVal) NumConst:numConst {: RESULT=new NumConstVal(numConst); RESULT.setLine(numConstleft); :}
			|
			(CharConstVal) CharConst:varConst {: RESULT=new CharConstVal(varConst); RESULT.setLine(varConstleft); :}
			|
			(BoolConstVal) BoolConst:boolConst {: RESULT=new BoolConstVal(boolConst); RESULT.setLine(boolConstleft); :}
			;
			

NumConst ::= (NumConst) NUMBER:numberValue {: RESULT=new NumConst(numberValue); RESULT.setLine(numberValueleft); :};

CharConst ::= (CharConst) CHARACTER:characterValue {: RESULT=new CharConst(characterValue); RESULT.setLine(characterValueleft); :};

BoolConst ::= (BoolConst) BOOLEAN:booleanValue {: RESULT=new BoolConst(booleanValue); RESULT.setLine(booleanValueleft); :};

RecordDecl ::= (RecordDeclaration) RECORD IDENT:I1 LBRACKET ListOfVarDecls:L2 RBRACKET {: RESULT=new RecordDeclaration(I1, L2); RESULT.setLine(I1left); :};

VarDecl ::= (VarDeclaration) Type:varType VarDeclSingle:V1 ListOfVarDecls:L2 SEMI {: RESULT=new VarDeclaration(varType, V1, L2); RESULT.setLine(varTypeleft); :}
			|
		   (ErrorVarDeclarationSemi) error SEMI:l
		   {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :} {: RESULT=new ErrorVarDeclarationSemi(); :}
		   |
		   (ErrorVarDeclarationComma) error COMMA:l
		   {: parser.report_error("Izvrsen oporavak do , u liniji " + lleft, null);  :} {: RESULT=new ErrorVarDeclarationComma(); :}
		   ;

ListOfVarDecls ::= (ListVarDecls) ListOfVarDecls:L1 COMMA VarDeclSingle:V2 {: RESULT=new ListVarDecls(L1, V2); RESULT.setLine(L1left); :}
				 |
				 (NoVars) {: RESULT=new NoVars(); :}
				 ;
				 
VarDeclSingle ::= (VarArray) ArrName:A1 LBRACKET RBRACKET {: RESULT=new VarArray(A1); RESULT.setLine(A1left); :}
				|
				(VarVariable) VarName:V1 {: RESULT=new VarVariable(V1); RESULT.setLine(V1left); :}
				;
	
ArrName ::= (ArrayName) IDENT:arrName {: RESULT=new ArrayName(arrName); RESULT.setLine(arrNameleft); :};			

VarName ::= (VariableName) IDENT:varName {: RESULT=new VariableName(varName); RESULT.setLine(varNameleft); :};

MulVarDecls ::= (MulVariableDecls) MulVarDecls:M1 VarDecl:V2 {: RESULT=new MulVariableDecls(M1, V2); RESULT.setLine(M1left); :}
			  |
			  (NoMulVars) {: RESULT=new NoMulVars(); :}
			  ; 

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};

ListOfStatements ::= (ListStatements) ListOfStatements:L1 StatementOnly:S2 {: RESULT=new ListStatements(L1, S2); RESULT.setLine(L1left); :}
					|
					(NoStmts) {: RESULT=new NoStmts(); :}
					;
					
StatementOnly ::= (StatementWithLabel) Label:L1 COLON SingleStatement:S2 {: RESULT=new StatementWithLabel(L1, S2); RESULT.setLine(L1left); :}
				|
				(StatementWithoutLabel) SingleStatement:S1 {: RESULT=new StatementWithoutLabel(S1); RESULT.setLine(S1left); :}
				;

SingleStatement ::= (MatchedStatementClass) MatchedStatement:M1 {: RESULT=new MatchedStatementClass(M1); RESULT.setLine(M1left); :}
					|
					(UnmatchedStatementClass) UnmatchedStatement:U1 {: RESULT=new UnmatchedStatementClass(U1); RESULT.setLine(U1left); :}
					|
					(NoUnmatchedNoMatchedStatementClass) Statements:S1 {: RESULT=new NoUnmatchedNoMatchedStatementClass(S1); RESULT.setLine(S1left); :}
					;
	
IfPart ::= (IfPart) IF {: RESULT=new IfPart(); :};

ElsePart ::= (ElsePart) ELSE {: RESULT=new ElsePart(); :};

DoPart ::= (DoPart) DO {: RESULT=new DoPart(); :};

WhilePart ::= (WhilePart) WHILE {: RESULT=new WhilePart(); :};

BreakPart ::= (BreakPart) BREAK {: RESULT=new BreakPart(); :};

ContinuePart ::= (ContinuePart) CONTINUE {: RESULT=new ContinuePart(); :};

ReturnPart ::= (ReturnPart) RETURN {: RESULT=new ReturnPart(); :};

ReadPart ::= (ReadPart) READ {: RESULT=new ReadPart(); :};

PrintPart ::= (PrintPart) PRINT {: RESULT=new PrintPart(); :};

GotoPart ::= (GotoPart) GOTO {: RESULT=new GotoPart(); :};

IncPart ::= (IncPart) INC {: RESULT=new IncPart(); :};
IncIncPart ::= (IncIncPart) INCINC {: RESULT=new IncIncPart(); :};
DecPart ::= (DecPart) DEC {: RESULT=new DecPart(); :};

IfConditionPart ::= (IfConditionPart) IfPart:I1 LPAREN Condition:C2 RPAREN {: RESULT=new IfConditionPart(I1, C2); RESULT.setLine(I1left); :};

UnmatchedStatement ::= (UnmatchedIfElse) IfPart:I1 MatchedStatement:M2 ElsePart:E3 UnmatchedStatement:U4 {: RESULT=new UnmatchedIfElse(I1, M2, E3, U4); RESULT.setLine(I1left); :}
					 |
					 (UnmatchedIfStatem) IfConditionPart:I1 SingleStatement:S2 {: RESULT=new UnmatchedIfStatem(I1, S2); RESULT.setLine(I1left); :}
					 ;

MatchedStatement ::= (DesignatorStatementMatched) DesignatorStatement:D1 SEMI {: RESULT=new DesignatorStatementMatched(D1); RESULT.setLine(D1left); :}
				  |
				  (IfElseStatement) IfConditionPart:I1 MatchedStatement:M2 ElsePart:E3 MatchedStatement:M4 {: RESULT=new IfElseStatement(I1, M2, E3, M4); RESULT.setLine(I1left); :}
				  |
				  (DoStatement) DoPart:D1 SingleStatement:S2 WhilePart:W3 LPAREN Condition:C4 RPAREN SEMI {: RESULT=new DoStatement(D1, S2, W3, C4); RESULT.setLine(D1left); :}
				  |
				  (BreakStatement) BreakPart:B1 SEMI {: RESULT=new BreakStatement(B1); RESULT.setLine(B1left); :}
				  |
				  (ContinueStatement) ContinuePart:C1 SEMI {: RESULT=new ContinueStatement(C1); RESULT.setLine(C1left); :}
				  |
				  (RetExprStatement) ReturnPart:R1 Expr:E2 SEMI {: RESULT=new RetExprStatement(R1, E2); RESULT.setLine(R1left); :}
				  |
				  (RetVoidStatement) ReturnPart:R1 SEMI {: RESULT=new RetVoidStatement(R1); RESULT.setLine(R1left); :}
				  |
				  (ReadStatement) ReadPart:R1 LPAREN Designator:D2 RPAREN SEMI {: RESULT=new ReadStatement(R1, D2); RESULT.setLine(R1left); :}
				  |
				  (GoToStatement) GotoPart:G1 Label:L2 SEMI {: RESULT=new GoToStatement(G1, L2); RESULT.setLine(G1left); :}
				  |
				  (PrintExprStatement) PrintPart:P1 LPAREN Expr:E2 RPAREN SEMI {: RESULT=new PrintExprStatement(P1, E2); RESULT.setLine(P1left); :}
				  |
				  (PrintExprNumStatement) PrintPart:P1 LPAREN Expr:E2 COMMA NumConst:N3 RPAREN SEMI {: RESULT=new PrintExprNumStatement(P1, E2, N3); RESULT.setLine(P1left); :}
				  ; 
	
Statements ::= (Statements) LBRACE ListOfStatements:L1 RBRACE {: RESULT=new Statements(L1); RESULT.setLine(L1left); :};

DesignatorStatement ::= (DesignatorStmt) DesignatorStatementParams:D1 {: RESULT=new DesignatorStmt(D1); RESULT.setLine(D1left); :};

DesignatorStatementParams ::= (DesignatorParamsAssignopExpr) Designator:D1 Assignop:A2 Expr:E3 {: RESULT=new DesignatorParamsAssignopExpr(D1, A2, E3); RESULT.setLine(D1left); :}
							|
							(DesignatorReverse) Designator:D1 REVERSE NumConst:N2 {: RESULT=new DesignatorReverse(D1, N2); RESULT.setLine(D1left); :}
							|
							(DesignatorWithoutParams) Designator:D1 LPAREN RPAREN {: RESULT=new DesignatorWithoutParams(D1); RESULT.setLine(D1left); :}
							|
							(DesignatorParamsActPars) Designator:D1 LPAREN ActualParamList:A2 RPAREN {: RESULT=new DesignatorParamsActPars(D1, A2); RESULT.setLine(D1left); :}
							|
							(DesignatorParamsInc) Designator:D1 IncPart:inc {: RESULT=new DesignatorParamsInc(D1, inc); RESULT.setLine(D1left); :}
							|
							(DesignatorParamsIncInc) Designator:D1 IncIncPart:inc {: RESULT=new DesignatorParamsIncInc(D1, inc); RESULT.setLine(D1left); :}
							|
							(DesignatorParamsDec) Designator:D1 DecPart:dec {: RESULT=new DesignatorParamsDec(D1, dec); RESULT.setLine(D1left); :}
							;

ListOfMethodDecls ::= (ListMethodDecls) ListOfMethodDecls:L1 MethodDecl:M2 {: RESULT=new ListMethodDecls(L1, M2); RESULT.setLine(L1left); :}
					|
					(NoMetDecls) {: RESULT=new NoMetDecls(); :}
					;
					
MethodBegin ::= (MethodVoid) VOID:methodType IDENT:methodName {: RESULT=new MethodVoid(methodName); RESULT.setLine(methodNameleft); :}
			 |
			 (MethodRetType) Type:methodType IDENT:methodName {: RESULT=new MethodRetType(methodType, methodName); RESULT.setLine(methodTypeleft); :}
			 ;
			 

MethodDecl ::= (MethodDeclr) MethodBegin:M1 LPAREN MethodFormPars:M2 RPAREN MulVarDecls:varDeclMethod Statements:S3 {: RESULT=new MethodDeclr(M1, M2, varDeclMethod, S3); RESULT.setLine(M1left); :};

MethodFormPars ::= (MethodFormalPars) ListOfFormParams:L1 COMMA FormParam:F2 {: RESULT=new MethodFormalPars(L1, F2); RESULT.setLine(L1left); :}
					|
					(ErrorMethodFormalParsComma) error COMMA:l
		   			{: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :} {: RESULT=new ErrorMethodFormalParsComma(); :}
					|
					(MethodFormParamOnly) FormParam:F1 {: RESULT=new MethodFormParamOnly(F1); RESULT.setLine(F1left); :}
					|
					(MethodFormalParsOptArgs) ListOfFormParams:L1 ListOfOptParams:L2 {: RESULT=new MethodFormalParsOptArgs(L1, L2); RESULT.setLine(L1left); :}
					|
					(MethodOptArgs) OptArg:O1 ListOfOptParams:L2 {: RESULT=new MethodOptArgs(O1, L2); RESULT.setLine(O1left); :}
					|
					(MethodOptArgOnly) OptArg:O1 {: RESULT=new MethodOptArgOnly(O1); RESULT.setLine(O1left); :}
					|
					(NoFormPars) {: RESULT=new NoFormPars(); :}
				 	;

				 	
ListOfFormParams ::= (ListOfFormParamsClass) ListOfFormParams:L1 COMMA FormParam:F2 {: RESULT=new ListOfFormParamsClass(L1, F2); RESULT.setLine(L1left); :}
					|
					(FprmParamOnly) FormParam:F1 {: RESULT=new FprmParamOnly(F1); RESULT.setLine(F1left); :};
					
ListOfOptParams ::= (OptArgSingle) COMMA OptArg:O1 {: RESULT=new OptArgSingle(O1); RESULT.setLine(O1left); :}
				  |
				  (OptArgMore) COMMA OptArg:O1 ListOfOptParams:L2 {: RESULT=new OptArgMore(O1, L2); RESULT.setLine(O1left); :}
				  ;
				  
OptArg ::= (OptArg) Type:T1 IDENT:optArgName Assignop:A2 ConstVal:value {: RESULT=new OptArg(T1, optArgName, A2, value); RESULT.setLine(T1left); :};
				 
FormParam ::= (FormParams) Type:formParamType FormParamName:formParamName {: RESULT=new FormParams(formParamType, formParamName); RESULT.setLine(formParamTypeleft); :}
			|
			(FormParamArr) Type:formParamType FormParamName:formParamName LBRACKET RBRACKET {: RESULT=new FormParamArr(formParamType, formParamName); RESULT.setLine(formParamTypeleft); :}
			;
			
FormParamName ::= (FormParamName) IDENT:formParamName {: RESULT=new FormParamName(formParamName); RESULT.setLine(formParamNameleft); :};
			
ClassDecl ::= (SubClassDecl) CLASS IDENT:className EXTENDS Type:parentType LBRACE MulVarDecls:M1 LBRACE ClassBody:C2 RBRACE RBRACE {: RESULT=new SubClassDecl(className, parentType, M1, C2); RESULT.setLine(classNameleft); :} 
			|
			(NormalClassDecl) CLASS IDENT:className LBRACE MulVarDecls:M1 LBRACE ClassBody:C2 RBRACE RBRACE {: RESULT=new NormalClassDecl(className, M1, C2); RESULT.setLine(classNameleft); :} 
			;
			
ClassBody ::= (ClassBodyWithConstr) ClassBodyWithConstructorPart:C1 {: RESULT=new ClassBodyWithConstr(C1); RESULT.setLine(C1left); :}
			|
			(ClassBodyWithoutConstr) ClassBodyWithoutConstructorPart:C1 {: RESULT=new ClassBodyWithoutConstr(C1); RESULT.setLine(C1left); :}
			|
			(NoBody) {: RESULT=new NoBody(); :}
			;
			
ConstructorDecl ::= (ConstructorDeclr) IDENT:I1 LPAREN RPAREN MulVarDecls:M2 Statements:S3 {: RESULT=new ConstructorDeclr(I1, M2, S3); RESULT.setLine(I1left); :};
			
ClassBodyWithConstructorPart ::= (ClassBodyWithConstructorAndMethods) ConstructorDecl:C1 MethodDecl:M2 ListOfMethodDecls:L3 {: RESULT=new ClassBodyWithConstructorAndMethods(C1, M2, L3); RESULT.setLine(C1left); :}
							|
							(ClassBodyWithConstructorOnly) ConstructorDecl:C1 {: RESULT=new ClassBodyWithConstructorOnly(C1); RESULT.setLine(C1left); :}
							;
							
ClassBodyWithoutConstructorPart ::= (ClassBodyWithMethodsOnly) MethodDecl:M1 ListOfMethodDecls:L2 {: RESULT=new ClassBodyWithMethodsOnly(M1, L2); RESULT.setLine(M1left); :};
		
Expr ::= (ExprClass) ExprSingle:E1 ExprIsNull:E2 {: RESULT=new ExprClass(E1, E2); RESULT.setLine(E1left); :};
			
ExprSingle ::= (ExprPositive) Term:T1 ListOfAddopTerms:L2 {: RESULT=new ExprPositive(T1, L2); RESULT.setLine(T1left); :}
	   |
	   (ExprNegative) MIN Term:T1 ListOfAddopTerms:L2 {: RESULT=new ExprNegative(T1, L2); RESULT.setLine(T1left); :}
	   ; 

Term ::= (Term) Factor:F1 ListOfMulopFactors:L2 {: RESULT=new Term(F1, L2); RESULT.setLine(F1left); :};

ExprIsNull ::= (ExprExprIsNullClass) IsNull:I1 Expr:E2 {: RESULT=new ExprExprIsNullClass(I1, E2); RESULT.setLine(I1left); :}
			  |
			  (NoExpr) {: RESULT=new NoExpr(); :}
			  ;
			  
IsNull ::= (IsNull) ISNULL {: RESULT=new IsNull(); :};

ListOfMulopFactors ::= (ListMulopFactors) ListOfMulopFactors:L1 Mulop:M2 Factor:F3 {: RESULT=new ListMulopFactors(L1, M2, F3); RESULT.setLine(L1left); :}
					 |
					 (NoMulopFactors) {: RESULT=new NoMulopFactors(); :}
					 ;
					 
Factor ::= (Factor) FactorWrapper:F1 {: RESULT=new Factor(F1); RESULT.setLine(F1left); :};

FactorWrapper ::= (FactorDesign) Designator:D1 {: RESULT=new FactorDesign(D1); RESULT.setLine(D1left); :}
		 |
		 (FactorDesignWithoutParams) Designator:D1 LPAREN RPAREN {: RESULT=new FactorDesignWithoutParams(D1); RESULT.setLine(D1left); :}
		 |
		 (FactorDesignWithParams) Designator:D1 LPAREN ActualParamList:A2 RPAREN {: RESULT=new FactorDesignWithParams(D1, A2); RESULT.setLine(D1left); :}
		 |
		 (FactorNum) NUMBER:N1 {: RESULT=new FactorNum(N1); RESULT.setLine(N1left); :}
		 |
		 (FactorChar) CHARACTER:C1 {: RESULT=new FactorChar(C1); RESULT.setLine(C1left); :}
		 |
		 (FactorBool) BOOLEAN:B1 {: RESULT=new FactorBool(B1); RESULT.setLine(B1left); :}
		 |
		 (FactorNewType) NEW Type:T1 {: RESULT=new FactorNewType(T1); RESULT.setLine(T1left); :}
		 |
		 (FactorNewTypeExpr) NEW Type:T1 LBRACKET Expr:E2 RBRACKET {: RESULT=new FactorNewTypeExpr(T1, E2); RESULT.setLine(T1left); :}
		 |
		 (FactorExpr) LPAREN Expr:E1 RPAREN {: RESULT=new FactorExpr(E1); RESULT.setLine(E1left); :}
		 |
		 (FactorMaxArray) MAX Designator:D1 {: RESULT=new FactorMaxArray(D1); RESULT.setLine(D1left); :}
		 ;
		
ActualParamList ::= (ActualParams) ActualParamList:A1 COMMA Expr:E2 {: RESULT=new ActualParams(A1, E2); RESULT.setLine(A1left); :}
				|
				(ActualParam) Expr:E1 {: RESULT=new ActualParam(E1); RESULT.setLine(E1left); :}
				;
				
Condition ::= (ConditionClass) Condition:C1 OR CondTerm:C2 {: RESULT=new ConditionClass(C1, C2); RESULT.setLine(C1left); :}
			  |
			  (ConditionSingleClass) CondTerm:C1 {: RESULT=new ConditionSingleClass(C1); RESULT.setLine(C1left); :}
			  ;

CondTerm ::= (CondTermAndCondFactClass) CondTerm:C1 AND CondFact:C2 {: RESULT=new CondTermAndCondFactClass(C1, C2); RESULT.setLine(C1left); :}
			|
			(CondFactClass) CondFact:C1 {: RESULT=new CondFactClass(C1); RESULT.setLine(C1left); :}
			;


CondFact ::= (CondFactExprClass) Expr:E1 {: RESULT=new CondFactExprClass(E1); RESULT.setLine(E1left); :}
			|
			(CondFactExprRelopExprClass) Expr:E1 Relop:R2 Expr:E3 {: RESULT=new CondFactExprRelopExprClass(E1, R2, E3); RESULT.setLine(E1left); :}
			; 
				
Designator ::= (DesignatorIdentOnly) IDENT:designatorName {: RESULT=new DesignatorIdentOnly(designatorName); RESULT.setLine(designatorNameleft); :}
				|
				(DesignatorDotIdent) Designator:D1 DOT IDENT:I2 {: RESULT=new DesignatorDotIdent(D1, I2); RESULT.setLine(D1left); :}
				|
				(DesignatorArrayExpr) Designator:D1 LBRACKET Expr:E2 RBRACKET {: RESULT=new DesignatorArrayExpr(D1, E2); RESULT.setLine(D1left); :}
				;


ListOfAddopTerms ::= (ListAddopTerms) ListOfAddopTerms:L1 Addop:A2 Term:T3 {: RESULT=new ListAddopTerms(L1, A2, T3); RESULT.setLine(L1left); :}
					|
					(NoListOfAdopTerms) {: RESULT=new NoListOfAdopTerms(); :}
					;
					
AddopTerm ::= (AddopTerm) AddopTerm:A1 Addop:A2 Term:T3 {: RESULT=new AddopTerm(A1, A2, T3); RESULT.setLine(A1left); :};

Label ::= (Label) IDENT:I1 {: RESULT=new Label(I1); RESULT.setLine(I1left); :};

Addop ::= (Plus) PLUS {: RESULT=new Plus(); :}
		|
		(Minus) MIN {: RESULT=new Minus(); :}
		;
		
Mulop ::= (Mul) MUL {: RESULT=new Mul(); :}
		|
		(Div) DIV {: RESULT=new Div(); :}
		|
		(Mod) MOD {: RESULT=new Mod(); :}
		;

Relop ::= (Same) EQ {: RESULT=new Same(); :} 
		|
		(Differ) NEQ {: RESULT=new Differ(); :}
		|
		(GreaterThan) GT {: RESULT=new GreaterThan(); :}
		|
		(GreaterEqualTo) GTE {: RESULT=new GreaterEqualTo(); :}
		|
		(LessThan) LT {: RESULT=new LessThan(); :}
		|
		(LessEqualTo) LTE {: RESULT=new LessEqualTo(); :}
		;
		
Assignop ::= ASSIGN {: RESULT=new AssignopDerived1(); :};
		

