

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected = false;
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG;
terminal CONST;
terminal LBRACE, RBRACE, SEMI, LPAREN, RPAREN,  LBRACKET, RBRACKET, ASSIGN, RETURN, PLUS, COMMA, PRINT, VOID;
terminal Character CHARACTER;
terminal int NUMBER;
terminal Boolean BOOLEAN;
terminal String IDENT;
terminal IF, ELSE;
terminal CLASS, EXTENDS, DOT, COLON, RECORD;
terminal DO, WHILE, BREAK, CONTINUE, READ, GOTO;
terminal INC, DEC, MIN, MUL, DIV, MOD, EQ, NEQ, GT, GTE, LT, LTE, AND, OR;
terminal NEW;
terminal ISNULL, THIS, ENUM, SUPER;




terminal REVERSE, INCINC, MAX;

nonterminal Program, ListOfDeclForProg, DeclForProg, ListOfMethodDecls, ConstDecl, VarDecl, RecordDecl, MethodDecl;
nonterminal ListOfConstExps, ConstVal, NumConst, CharConst, BoolConst;
nonterminal ListOfVarDecls, VarDeclSingle, VarName, ArrName, MulVarDecls;
nonterminal ClassDecl, ConstructorDecl, ClassBody, MethodFormPars, ClassBodyWithConstructorPart, ClassBodyWithoutConstructorPart;
nonterminal FormParam, ListOfStatements;
nonterminal FormPars, FormalParamList, FormalParamDecl, Statement, Statements, StatementOnly;
nonterminal ActualParamList;
nonterminal Assignop, Relop, Mulop, Addop, Label, AddopTerm;
nonterminal ListOfAddopTerms, ListOfMulopFactors;
nonterminal Condition, CondTerm, CondFact;
nonterminal FormParamName, DesignatorStatement, DesignatorStatementParams;
nonterminal SingleStatement;
nonterminal MatchedStatement, UnmatchedStatement;
nonterminal IfPart, ElsePart, DoPart, WhilePart, BreakPart, ContinuePart, ReturnPart, ReadPart, PrintPart, GotoPart, IfConditionPart, IncPart, DecPart;		
nonterminal ExprIsNull;
nonterminal ListOfFormParams, ListOfOptParams, OptArg;
nonterminal IsNull;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgramName, ConstExp, MethodBegin, Designator;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Expr, ExprSingle, FactorWrapper, Term, Factor;



nonterminal IncIncPart;

Program ::= (Program) ProgramName ListOfDeclForProg LBRACE ListOfMethodDecls RBRACE;

ProgramName ::= (ProgramName) PROG IDENT:progName;

ListOfDeclForProg ::= (ListDeclForProg) ListOfDeclForProg DeclForProg
					|
					(NoListOfDecs)
					;

DeclForProg ::= (ConstDeclForProg) ConstDecl:constDecl
			  | 
			  (VarDeclForProg) VarDecl:varDecl
			  |
			  (ClassDeclForProg) ClassDecl:classDecl
			  |
			  (RecordDeclForProg) RecordDecl:recordDecl
			  ;

ConstDecl ::= (ConstDeclaration) CONST Type:constType ConstExp ListOfConstExps SEMI;

ListOfConstExps ::= (ConstExpsList) ListOfConstExps COMMA ConstExp
				  |
				  (NoConsts)
				  ;
				  
ConstExp ::= (ConstExp) IDENT:constName ASSIGN ConstVal:constVal;
				  
ConstVal ::= (NumConstVal) NumConst:numConst
			|
			(CharConstVal) CharConst:varConst
			|
			(BoolConstVal) BoolConst:boolConst
			;
			

NumConst ::= (NumConst) NUMBER:numberValue;

CharConst ::= (CharConst) CHARACTER:characterValue;

BoolConst ::= (BoolConst) BOOLEAN:booleanValue;

RecordDecl ::= (RecordDeclaration) RECORD IDENT LBRACKET ListOfVarDecls RBRACKET;

VarDecl ::= (VarDeclaration) Type:varType VarDeclSingle ListOfVarDecls SEMI
			|
		   (ErrorVarDeclarationSemi) error SEMI:l
		   {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :}
		   |
		   (ErrorVarDeclarationComma) error COMMA:l
		   {: parser.report_error("Izvrsen oporavak do , u liniji " + lleft, null);  :}
		   ;

ListOfVarDecls ::= (ListVarDecls) ListOfVarDecls COMMA VarDeclSingle
				 |
				 (NoVars)
				 ;
				 
VarDeclSingle ::= (VarArray) ArrName LBRACKET RBRACKET
				|
				(VarVariable) VarName
				;
	
ArrName ::= (ArrayName) IDENT:arrName;			

VarName ::= (VariableName) IDENT:varName;

MulVarDecls ::= (MulVariableDecls) MulVarDecls VarDecl
			  |
			  (NoMulVars)
			  ; 

Type ::= (Type) IDENT:typeName;

ListOfStatements ::= (ListStatements) ListOfStatements StatementOnly
					|
					(NoStmts)
					;
					
StatementOnly ::= (StatementWithLabel) Label COLON SingleStatement
				|
				(StatementWithoutLabel) SingleStatement
				;

SingleStatement ::= (MatchedStatementClass) MatchedStatement
					|
					(UnmatchedStatementClass) UnmatchedStatement
					|
					(NoUnmatchedNoMatchedStatementClass) Statements
					;
	
IfPart ::= (IfPart) IF;

ElsePart ::= (ElsePart) ELSE;

DoPart ::= (DoPart) DO;

WhilePart ::= (WhilePart) WHILE;

BreakPart ::= (BreakPart) BREAK;

ContinuePart ::= (ContinuePart) CONTINUE;

ReturnPart ::= (ReturnPart) RETURN;

ReadPart ::= (ReadPart) READ;

PrintPart ::= (PrintPart) PRINT;

GotoPart ::= (GotoPart) GOTO;

IncPart ::= (IncPart) INC;
IncIncPart ::= (IncIncPart) INCINC;
DecPart ::= (DecPart) DEC;

IfConditionPart ::= (IfConditionPart) IfPart LPAREN Condition RPAREN;

UnmatchedStatement ::= (UnmatchedIfElse) IfPart MatchedStatement ElsePart UnmatchedStatement
					 |
					 (UnmatchedIfStatem) IfConditionPart SingleStatement
					 ;

MatchedStatement ::= (DesignatorStatementMatched) DesignatorStatement SEMI
				  |
				  (IfElseStatement) IfConditionPart MatchedStatement ElsePart MatchedStatement
				  |
				  (DoStatement) DoPart SingleStatement WhilePart LPAREN Condition RPAREN SEMI
				  |
				  (BreakStatement) BreakPart SEMI
				  |
				  (ContinueStatement) ContinuePart SEMI
				  |
				  (RetExprStatement) ReturnPart Expr SEMI
				  |
				  (RetVoidStatement) ReturnPart SEMI
				  |
				  (ReadStatement) ReadPart LPAREN Designator RPAREN SEMI
				  |
				  (GoToStatement) GotoPart Label SEMI
				  |
				  (PrintExprStatement) PrintPart LPAREN Expr RPAREN SEMI
				  |
				  (PrintExprNumStatement) PrintPart LPAREN Expr COMMA NumConst RPAREN SEMI
				  ; 
	
Statements ::= (Statements) LBRACE ListOfStatements RBRACE;

DesignatorStatement ::= (DesignatorStmt) DesignatorStatementParams;

DesignatorStatementParams ::= (DesignatorParamsAssignopExpr) Designator Assignop Expr
							|
							(DesignatorReverse) Designator REVERSE NumConst
							|
							(DesignatorWithoutParams) Designator LPAREN RPAREN
							|
							(DesignatorParamsActPars) Designator LPAREN ActualParamList RPAREN
							|
							(DesignatorParamsInc) Designator IncPart:inc
							|
							(DesignatorParamsIncInc) Designator IncIncPart:inc
							|
							(DesignatorParamsDec) Designator DecPart:dec
							;

ListOfMethodDecls ::= (ListMethodDecls) ListOfMethodDecls MethodDecl
					|
					(NoMetDecls)
					;
					
MethodBegin ::= (MethodVoid) VOID:methodType IDENT:methodName
			 |
			 (MethodRetType) Type:methodType IDENT:methodName
			 ;
			 

MethodDecl ::= (MethodDeclr) MethodBegin LPAREN MethodFormPars RPAREN MulVarDecls:varDeclMethod Statements;

MethodFormPars ::= (MethodFormalPars) ListOfFormParams COMMA FormParam
					|
					(ErrorMethodFormalParsComma) error COMMA:l
		   			{: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :}
					|
					(MethodFormParamOnly) FormParam
					|
					(MethodFormalParsOptArgs) ListOfFormParams ListOfOptParams
					|
					(MethodOptArgs) OptArg ListOfOptParams
					|
					(MethodOptArgOnly) OptArg
					|
					(NoFormPars)
				 	;

				 	
ListOfFormParams ::= (ListOfFormParamsClass) ListOfFormParams COMMA FormParam
					|
					(FprmParamOnly) FormParam;
					
ListOfOptParams ::= (OptArgSingle) COMMA OptArg
				  |
				  (OptArgMore) COMMA OptArg ListOfOptParams
				  ;
				  
OptArg ::= (OptArg) Type IDENT:optArgName Assignop ConstVal:value;
				 
FormParam ::= (FormParams) Type:formParamType FormParamName:formParamName
			|
			(FormParamArr) Type:formParamType FormParamName:formParamName LBRACKET RBRACKET
			;
			
FormParamName ::= (FormParamName) IDENT:formParamName;
			
ClassDecl ::= (SubClassDecl) CLASS IDENT:className EXTENDS Type:parentType LBRACE MulVarDecls LBRACE ClassBody RBRACE RBRACE 
			|
			(NormalClassDecl) CLASS IDENT:className LBRACE MulVarDecls LBRACE ClassBody RBRACE RBRACE 
			;
			
ClassBody ::= (ClassBodyWithConstr) ClassBodyWithConstructorPart
			|
			(ClassBodyWithoutConstr) ClassBodyWithoutConstructorPart
			|
			(NoBody)
			;
			
ConstructorDecl ::= (ConstructorDeclr) IDENT LPAREN RPAREN MulVarDecls Statements;
			
ClassBodyWithConstructorPart ::= (ClassBodyWithConstructorAndMethods) ConstructorDecl MethodDecl ListOfMethodDecls
							|
							(ClassBodyWithConstructorOnly) ConstructorDecl
							;
							
ClassBodyWithoutConstructorPart ::= (ClassBodyWithMethodsOnly) MethodDecl ListOfMethodDecls;
		
Expr ::= (ExprClass) ExprSingle ExprIsNull;
			
ExprSingle ::= (ExprPositive) Term ListOfAddopTerms
	   |
	   (ExprNegative) MIN Term ListOfAddopTerms
	   ; 

Term ::= (Term) Factor ListOfMulopFactors;

ExprIsNull ::= (ExprExprIsNullClass) IsNull Expr
			  |
			  (NoExpr)
			  ;
			  
IsNull ::= (IsNull) ISNULL;

ListOfMulopFactors ::= (ListMulopFactors) ListOfMulopFactors Mulop Factor
					 |
					 (NoMulopFactors)
					 ;
					 
Factor ::= (Factor) FactorWrapper;

FactorWrapper ::= (FactorDesign) Designator
		 |
		 (FactorDesignWithoutParams) Designator LPAREN RPAREN
		 |
		 (FactorDesignWithParams) Designator LPAREN ActualParamList RPAREN
		 |
		 (FactorNum) NUMBER
		 |
		 (FactorChar) CHARACTER
		 |
		 (FactorBool) BOOLEAN
		 |
		 (FactorNewType) NEW Type
		 |
		 (FactorNewTypeExpr) NEW Type LBRACKET Expr RBRACKET
		 |
		 (FactorExpr) LPAREN Expr RPAREN
		 |
		 (FactorMaxArray) MAX Designator
		 ;
		
ActualParamList ::= (ActualParams) ActualParamList COMMA Expr
				|
				(ActualParam) Expr
				;
				
Condition ::= (ConditionClass) Condition OR CondTerm
			  |
			  (ConditionSingleClass) CondTerm
			  ;

CondTerm ::= (CondTermAndCondFactClass) CondTerm AND CondFact
			|
			(CondFactClass) CondFact
			;


CondFact ::= (CondFactExprClass) Expr
			|
			(CondFactExprRelopExprClass) Expr Relop Expr
			; 
				
Designator ::= (DesignatorIdentOnly) IDENT:designatorName
				|
				(DesignatorDotIdent) Designator DOT IDENT
				|
				(DesignatorArrayExpr) Designator LBRACKET Expr RBRACKET
				;


ListOfAddopTerms ::= (ListAddopTerms) ListOfAddopTerms Addop Term
					|
					(NoListOfAdopTerms)
					;
					
AddopTerm ::= (AddopTerm) AddopTerm Addop Term;

Label ::= (Label) IDENT;

Addop ::= (Plus) PLUS
		|
		(Minus) MIN
		;
		
Mulop ::= (Mul) MUL
		|
		(Div) DIV
		|
		(Mod) MOD
		;

Relop ::= (Same) EQ 
		|
		(Differ) NEQ
		|
		(GreaterThan) GT
		|
		(GreaterEqualTo) GTE
		|
		(LessThan) LT
		|
		(LessEqualTo) LTE
		;
		
Assignop ::= ASSIGN;
		

